# 使用一个具体的 Rust 版本以保证构建的可复现性，而不是 'latest'
image: rust:latest

# 定义全局变量
variables:
  # 将 Cargo 的主目录设置在项目工作区内，以便于缓存
  CARGO_HOME: "$CI_PROJECT_DIR/.cargo"
  # 优化 cargo fetch/clone 的方式
  CARGO_NET_GIT_FETCH_WITH_CLI: "true"

# 定义流水线的各个阶段
stages:
  - build
  - test

# 定义全局缓存策略
# 这样每个作业都会继承这个缓存配置
cache:
  # 使用 Cargo.lock 文件的哈希作为缓存键
  # 当依赖更新时，会自动生成新的缓存
  key:
    files:
      - Cargo.lock
  # 需要缓存的目录
  paths:
    - .cargo/
    - target/
  # "pull-push" 是默认策略，表示作业会下载缓存，并在成功后上传更新
  # "pull" 策略则只会下载缓存，不会上传，适用于不修改依赖和编译产物的作业
  policy: pull-push

# 构建作业
build_job:
  stage: build
  script:
    # --verbose 标志可以提供更详细的构建日志，有助于调试
    - cargo build --verbose
  # 这个作业会下载缓存，然后构建代码，最后将更新后的 target 目录推送到缓存

# 测试作业
test_job:
  stage: test
  script:
    - cargo test --verbose
  # 这个作业会下载 build_job 生成的缓存，但不会再次上传，因为测试不产生需要缓存的新产物
  cache:
    policy: pull # 覆盖默认的 pull-push 策略