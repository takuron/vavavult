# .gitlab-ci.yml

# 1. 指定用于运行作业的 Docker 镜像。
# 这相当于 GitHub Actions 中的 `runs-on: ubuntu-latest`。
# 我们使用官方的 Rust 镜像。
image: rust:latest

# 2. 定义流水线（pipeline）的各个阶段。
# 作业（job）会按照阶段的顺序执行。`build` 阶段成功后才会执行 `test` 阶段。
stages:
  - build
  - test

# 3. 定义全局环境变量。
# 这相当于 GitHub Actions 中的 `env:`。
variables:
  CARGO_TERM_COLOR: "always"

# 4. 定义一个名为 `build_job` 的作业。
build_job:
  stage: build
  # `script` 包含要执行的命令，类似于 GitHub Actions 中的 `run:`。
  # GitLab 会自动拉取代码，所以不需要 `actions/checkout` 步骤。
  script:
    - cargo build --verbose
  # `rules` 定义了何时运行此作业。
  # 这相当于 GitHub Actions 中的 `on:`。
  # 以下规则表示：在合并请求（merge request）或推送到默认分支（如 main）时运行。
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

# 5. 定义一个名为 `test_job` 的作业。
test_job:
  stage: test
  script:
    - cargo test --verbose
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'